# Copyright (c) 2020, NVIDIA CORPORATION. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of NVIDIA CORPORATION nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

name: "LPR_ensemble"
platform: "ensemble"
max_batch_size: 1
input [
	{
		name: "ensemble_input"
		data_type: TYPE_UINT8
		dims: [ 640, 640, 3 ]
	}
]
output [
	{
		name: "ensemble_output"
		data_type: TYPE_STRING
		dims: [ 7 ]
	}

]
ensemble_scheduling {
	step [
		{
			model_name: "lpd_prep"
			model_version: -1
			input_map {
				key: "LPD_input1_prep"
				value: "ensemble_input"
			}
			output_map {
				key: "LPD_output1_prep"
				value: "LPD_preprocessed"
			}
		},
		{
			model_name: "lpd"
			model_version: -1
			input_map {
				key: "images"
				value: "LPD_preprocessed"
			}
			output_map {
				key: "output"
				value: "lpd_output"
			}
		},
		{
			model_name: "lpd_post"
			model_version: -1
			input_map {
				key: "LPD_input1_post"
				value: "lpd_output"
			}
			output_map {
				key: "LPD_output1_post"
				value: "lpd_det"
			}
		},
		{
			model_name: "kps_prep"
			model_version: -1
			input_map {
				key: "KPS_input1_prep"
				value: "LPD_preprocessed"
			}
			input_map {
				key: "KPS_input2_prep"
				value: "lpd_det"
			}
			output_map {
				key: "KPS_output1_prep"
				value: "kps_preprocessed"
			}
		},
		{
			model_name: "kps"
			model_version: -1
			input_map {
				key: "input"
				value: "kps_preprocessed"
			}

			output_map {
				key: "output3"
				value: "kps_pts"
			}

			output_map {
				key: "output2"
				value: "kps_index"
			}

		},
		{
			model_name: "kps_post"
			model_version: -1
			input_map {
				key: "KPS_input1_post"
				value: "kps_pts"
			}

			input_map {
				key: "KPS_input2_post"
				value: "kps_index"
			}


			input_map {
				key: "KPS_input3_post"
				value: "LPD_preprocessed"
			}
			input_map {
				key: "KPS_input4_post"
				value: "lpd_det"
			}
			output_map {
				key: "KPS_output1_post"
				value: "lpr_input_aligned"
			}
		},
		{
			model_name: "lpr"
			model_version: -1
			input_map {
				key: "image_input"
				value: "lpr_input_aligned"
			}

			output_map {
				key: "tf_op_layer_ArgMax"
				value: "LPR_output"
			}
		},
		{
			model_name: "lpr_post"
			model_version: -1
			input_map {
				key: "LPR_input1_post"
				value: "LPR_output"
			}

			input_map {
				key: "LPR_input2_post"
				value: "lpd_det"
			}

			output_map {
				key: "LPR_output1_post"
				value: "ensemble_output"
			}
		}
		]
}

